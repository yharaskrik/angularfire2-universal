{"version":3,"file":"angularfire2.spec.js","sourceRoot":"","sources":["../../src/core/angularfire2.spec.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { Reference } from '@firebase/database-types';\nimport { TestBed, inject, withModule, async } from '@angular/core/testing';\nimport { ReflectiveInjector, Provider, PlatformRef, NgModule, Compiler, ApplicationRef, CompilerFactory } from '@angular/core';\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\nimport { Subscription } from 'rxjs/Subscription';\nimport { COMMON_CONFIG } from './test-config';\nimport { BrowserModule } from '@angular/platform-browser';\n\ndescribe('angularfire', () => {\n  let subscription:Subscription;\n  let app: FirebaseApp;\n  let rootRef: Reference;\n  let questionsRef: Reference;\n  let listOfQuestionsRef: Reference;\n  let defaultPlatform: PlatformRef;\n\n  const APP_NAME = 'super-awesome-test-firebase-app-name';\n\n  beforeEach(() => {\n\n    TestBed.configureTestingModule({\n      imports: [AngularFireModule.initializeApp(COMMON_CONFIG, APP_NAME)]\n    });\n\n    inject([FirebaseApp, PlatformRef], (_app: FirebaseApp, _platform: PlatformRef) => {\n      app = _app;\n      rootRef = app.database!().ref();\n      questionsRef = rootRef.child('questions');\n      listOfQuestionsRef = rootRef.child('list-of-questions');\n      defaultPlatform = _platform;\n    })();\n\n  });\n\n  afterEach((done) => {\n    rootRef.remove()\n    if(subscription && !subscription.closed) {\n      subscription.unsubscribe();\n    }\n    app.delete().then(done, done.fail);\n  });\n\n  describe('FirebaseApp', () => {\n    it('should provide a FirebaseApp for the FirebaseApp binding', () => {\n      expect(typeof app.delete).toBe('function');\n    });\n    it('should have the provided name', () => {\n      expect(app.name).toBe(APP_NAME);\n    })\n    it('should use an already intialized firebase app if it exists', done => {\n      @NgModule({\n        imports: [\n          AngularFireModule.initializeApp(COMMON_CONFIG, APP_NAME),\n          BrowserModule\n        ]})\n      class MyModule {\n        ngDoBootstrap() {}\n      }\n\n      const compilerFactory: CompilerFactory =\n          defaultPlatform.injector.get(CompilerFactory, null);\n      const moduleFactory = compilerFactory.createCompiler().compileModuleSync(MyModule);\n\n      defaultPlatform.bootstrapModuleFactory(moduleFactory)\n        .then(moduleRef => {\n          const ref = moduleRef.injector.get(FirebaseApp);\n          expect(ref.name).toEqual(app.name);\n        }).then(done, e => {\n          fail(e);\n          done()\n        });\n    })\n  });\n});\n"]}