{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../../../src/storage/storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAErF,OAAO,EAAE,gBAAgB,EAA+B,MAAM,OAAO,CAAC;AAGtE,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAGvF,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,cAAc,CAAS,4BAA4B,CAAC,CAAC;AAUtF,MAAM;IAGJ,YAC6B,QACU,MACF,eACnC,IAAY;QAEZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC;YACpC,MAAM,GAAG,GAAG,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,IAAI,SAAS,CAAC,CAAC;SAChD,CAAC,CAAC;KACJ;IAED,GAAG,CAAC,IAAY;QACd,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;KACjD;IAED,MAAM,CAAC,IAAY,EAAE,IAAS,EAAE,QAAyB;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,MAAM,GAAG,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KAChC;;;YAxBF,UAAU;;;4CAKN,MAAM,SAAC,iBAAiB;4CACxB,QAAQ,YAAI,MAAM,SAAC,eAAe;4CAClC,QAAQ,YAAI,MAAM,SAAC,aAAa;YAxBkB,MAAM","sourcesContent":["import { Injectable, Inject, Optional, InjectionToken, NgZone } from '@angular/core';\nimport { FirebaseStorage, UploadMetadata } from '@firebase/storage-types';\nimport { createStorageRef, AngularFireStorageReference } from './ref';\nimport { createUploadTask, AngularFireUploadTask } from './task';\nimport { Observable } from 'rxjs/Observable';\nimport { FirebaseAppConfig, FirebaseAppName, _firebaseAppFactory } from 'angularfire2';\nimport { FirebaseOptions } from '@firebase/app-types';\n\nexport const StorageBucket = new InjectionToken<string>('angularfire2.storageBucket');\n\n/**\n * AngularFireStorage Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for uploading and downloading binary files from Cloud Storage for\n * Firebase.\n */\n@Injectable()\nexport class AngularFireStorage {\n  public readonly storage: FirebaseStorage;\n\n  constructor(\n    @Inject(FirebaseAppConfig) config:FirebaseOptions,\n    @Optional() @Inject(FirebaseAppName) name:string,\n    @Optional() @Inject(StorageBucket) storageBucket:string,\n    zone: NgZone\n  ) {\n    this.storage = zone.runOutsideAngular(() => {\n      const app = _firebaseAppFactory(config, name);\n      return app.storage(storageBucket || undefined);\n    });\n  }\n\n  ref(path: string) {\n    return createStorageRef(this.storage.ref(path));\n  }\n\n  upload(path: string, data: any, metadata?: UploadMetadata) {\n    const storageRef = this.storage.ref(path);\n    const ref = createStorageRef(storageRef);\n    return ref.put(data, metadata);\n  }\n\n}\n"]}