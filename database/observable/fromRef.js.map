{"version":3,"file":"fromRef.js","sourceRoot":"","sources":["../../../../src/database/observable/fromRef.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,OAAO,uBAAuB,CAAC;AAC/B,OAAO,yBAAyB,CAAC;AACjC,OAAO,yBAAyB,CAAC;AAYjC,MAAM,kBAAkB,GAAkB,EAAE,KAAkB,EAAE,UAAiB;IAAjB,2BAAA,EAAA,iBAAiB;IAC/E,MAAM,CAAC,IAAI,UAAU,CAAkB,UAAA,UAAU;QAC/C,IAAM,EAAE,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,UAAC,QAAQ,EAAE,OAAO;YAClD,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,UAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,CAAC,CAAC;gBAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;aAAE;SACrD,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,EAAE,WAAW,gBAAK,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA,EAAC,EAAE,CAAC;SAChD;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,EAAE,WAAW,iBAAM,EAAE,CAAC;SAC9B;KACF,CAAC;SACD,GAAG,CAAC,UAAC,OAAwB;QACpB,IAAA,2BAAQ,EAAE,yBAAO,CAAa;QACtC,IAAI,GAAG,GAAkB,IAAI,CAAC;QAC9B,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;SAAE;QAC9C,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,SAAA,EAAE,GAAG,KAAA,EAAE,CAAC;KACzD,CAAC;SAID,KAAK,CAAC,CAAC,CAAC;SACR,KAAK,EAAE,CAAC;CACV","sourcesContent":["import { DatabaseQuery, DatabaseSnapshot, ListenEvent, AngularFireAction } from '../interfaces';\nimport { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { FirebaseZoneScheduler } from 'angularfire2';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/share';\n\ninterface SnapshotPrevKey {\n  snapshot: DatabaseSnapshot;\n  prevKey: string | null | undefined;\n}\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n */\nexport function fromRef(ref: DatabaseQuery, event: ListenEvent, listenType = 'on'): Observable<AngularFireAction<DatabaseSnapshot>> {\n  return new Observable<SnapshotPrevKey>(subscriber => {\n    const fn = ref[listenType](event, (snapshot, prevKey) => {\n      subscriber.next({ snapshot, prevKey });\n      if (listenType == 'once') { subscriber.complete(); }\n    }, subscriber.error.bind(subscriber));\n    if (listenType == 'on') {\n      return { unsubscribe() { ref.off(event, fn)} };\n    } else {\n      return { unsubscribe() { } };\n    }\n  })\n  .map((payload: SnapshotPrevKey) =>  {\n    const { snapshot, prevKey } = payload;\n    let key: string | null = null;\n    if (snapshot.exists()) { key = snapshot.key; }\n    return { type: event, payload: snapshot, prevKey, key };\n  })\n  // Ensures subscribe on observable is async. This handles\n  // a quirk in the SDK where on/once callbacks can happen\n  // synchronously.\n  .delay(0)\n  .share();\n}\n"]}