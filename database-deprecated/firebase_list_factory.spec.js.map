{"version":3,"file":"firebase_list_factory.spec.js","sourceRoot":"","sources":["../../../src/database-deprecated/firebase_list_factory.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataSnapshot } from '@firebase/database-types';\nimport { FirebaseApp, FirebaseAppConfig, AngularFireModule} from 'angularfire2';\nimport { AngularFireDatabase, AngularFireDatabaseModule, FirebaseListObservable,\n  FirebaseListFactory, onChildAdded, onChildChanged, onChildRemoved, onChildUpdated,\n  FirebaseObjectFactory\n} from 'angularfire2/database-deprecated';\nimport { TestBed, inject } from '@angular/core/testing';\nimport * as utils from './utils';\nimport { Query, AFUnwrappedDataSnapshot } from './interfaces';\nimport { Subscription, Observable, Subject } from 'rxjs';\nimport { COMMON_CONFIG } from './test-config';\nimport { _do } from 'rxjs/operator/do';\nimport { map } from 'rxjs/operator/map';\nimport { skip } from 'rxjs/operator/skip';\nimport { take } from 'rxjs/operator/take';\nimport { toArray } from 'rxjs/operator/toArray';\nimport { toPromise } from 'rxjs/operator/toPromise';\n\nconst questionsPath = 'questions';\n\nfunction queryTest(observable: Observable<any>, subject: Subject<any>, done: any) {\n  let nexted = false;\n  skipAndTake(observable, 2)\n    .subscribe((val: any) => {\n      if (!nexted) {\n        subject.next('2');\n      }\n      if (nexted) {\n        expect(nexted).toBe(true);\n        done();\n      }\n      nexted = true;\n    });\n\n  subject.next('20');\n}\n\ndescribe('AngularFireDatabase', () => {\n  let app: FirebaseApp;\n  let db: AngularFireDatabase;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG, '[DEFAULT]'),\n        AngularFireDatabaseModule\n      ]\n    });\n    inject([FirebaseApp, AngularFireDatabase], (app_: FirebaseApp, _db: AngularFireDatabase) => {\n      app = app_;\n      db = _db;\n    })();\n  });\n\n  afterEach(done => {\n    app.delete().then(done, done.fail);\n  });\n\n  describe('<constructor>', () => {\n\n    it('should accept a Firebase db url in the constructor', () => {\n      expect(db instanceof AngularFireDatabase).toBe(true);\n    });\n\n  });\n\n});\n\ndescribe('FirebaseListFactory', () => {\n\n  let app: FirebaseApp;\n  let db: AngularFireDatabase;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG, '[DEFAULT]'),\n        AngularFireDatabaseModule\n      ]\n    });\n    inject([FirebaseApp, AngularFireDatabase], (app_: FirebaseApp, _db: AngularFireDatabase) => {\n      app = app_;\n      db = _db;\n    })();\n  });\n\n\n  describe('<constructor>', () => {\n\n    it('should accept a Firebase db ref in the constructor', () => {\n      const list = FirebaseListFactory(app.database().ref(`questions`));\n      expect(list instanceof FirebaseListObservable).toBe(true);\n    });\n\n  });\n\n  describe('query', () => {\n\n    describe('orderByChild', () => {\n      /*\n        orderByChild combinations\n        ----------------------\n        orderByChild(\"\").equalTo()\n        orderByChild(\"\").startAt()\n        orderByChild(\"\").startAt().endAt();\n        orderByChild(\"\").endAt();\n      */\n      it('equalTo - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            equalTo: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('startAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            startAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('endAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            endAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('should throw an error if limitToLast and limitToFirst are chained', () => {\n\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            limitToFirst: 10,\n            limitToLast: 100\n          }\n        });\n        expect(observable.subscribe).toThrowError();\n      });\n\n      it('should throw an error if startAt is used with equalTo', () => {\n\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            equalTo: 10,\n            startAt: 100\n          }\n        });\n        expect(observable.subscribe).toThrowError();\n      });\n\n      it('should throw an error if endAt is used with equalTo', () => {\n\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            equalTo: 10,\n            endAt: 100\n          }\n        });\n        expect(observable.subscribe).toThrowError();\n      });\n\n      it('should throw an error if startAt and endAt is used with equalTo', () => {\n\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            equalTo: 10,\n            endAt: 100,\n            startAt: 103\n          }\n        });\n        expect(observable.subscribe).toThrowError();\n      });\n\n    });\n\n    describe('orderByValue', () => {\n      /*\n        orderByValue combinations\n        ----------------------\n        orderByValue(\"\").equalTo()\n        orderByValue(\"\").startAt()\n        orderByValue(\"\").startAt().endAt();\n        orderByValue(\"\").endAt();\n      */\n      it('equalTo - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByValue: true,\n            equalTo: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('startAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByValue: true,\n            startAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('endAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByValue: true,\n            endAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n    });\n\n    describe('orderByKey', () => {\n      /*\n        orderByKey combinations\n        ----------------------\n        orderByKey(\"\").equalTo()\n        orderByKey(\"\").startAt()\n        orderByKey(\"\").startAt().endAt();\n        orderByKey(\"\").endAt();\n      */\n      it('equalTo - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            equalTo: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('startAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            startAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('endAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            endAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n    });\n\n    describe('orderByPriority', () => {\n      /*\n        orderByPriority combinations\n        ----------------------\n        orderByPriority(\"\").equalTo()\n        orderByPriority(\"\").startAt()\n        orderByPriority(\"\").startAt().endAt();\n        orderByPriority(\"\").endAt();\n      */\n      it('equalTo - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            equalTo: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('startAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            startAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n\n      it('endAt - should re-run a query when the observable value has emitted', (done: any) => {\n\n        const subject = new Subject();\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByKey: true,\n            endAt: subject\n          }\n        });\n\n        queryTest(observable, subject, done);\n      });\n    });\n\n  });\n\n  describe('shape', () => {\n\n    it('should have a a FirebaseListObservable shape when queried', () => {\n        const observable = FirebaseListFactory(app.database().ref(questionsPath), {\n          query: {\n            orderByChild: 'height',\n            equalTo: '1'\n          }\n        });\n\n        expect(observable.push instanceof Function).toBe(true);\n        expect(observable.update instanceof Function).toBe(true);\n        expect(observable.remove instanceof Function).toBe(true);\n    });\n  });\n\n  describe('methods', () => {\n\n    let toKey: any;\n    let val1: any;\n    let val2: any;\n    let val3: any;\n    let questions: FirebaseListObservable<any>;\n    let questionsSnapshotted: FirebaseListObservable<any>;\n    let ref: any;\n    let refSnapshotted: any;\n    let subscription: Subscription;\n\n    beforeEach((done: any) => {\n      toKey = (val: any) => val.key;\n      val1 = { key: 'key1' };\n      val2 = { key: 'key2' };\n      val3 = { key: 'key3' };\n      app.database().ref().remove(done);\n      questions = FirebaseListFactory(app.database().ref(`questions`));\n      questionsSnapshotted = FirebaseListFactory(app.database().ref(`questionssnapshot`), { preserveSnapshot: true });\n      ref = questions.$ref;\n      refSnapshotted = questionsSnapshotted.$ref;\n    });\n\n\n    afterEach((done: any) => {\n      if (subscription && !subscription.closed) {\n        subscription.unsubscribe();\n      }\n      Promise.all([ref.remove(), refSnapshotted.remove()]).then(done, done.fail);\n    });\n\n\n    it('should emit only when the initial data set has been loaded', (done: any) => {\n      questions.$ref.ref.set([{ initial1: true }, { initial2: true }, { initial3: true }, { initial4: true }])\n        .then(() => toPromise.call(skipAndTake(questions, 1)))\n        .then((val: any[]) => {\n          expect(val.length).toBe(4);\n        })\n        .then(() => {\n          done();\n        }, done.fail);\n    });\n\n\n    it('should be resistant to non-asynchronous child_added quirks', (done: any) => {\n\n      // If push is called (or set or update, too, I guess) immediately after\n      // an on or once listener is added, it appears that the on or once\n      // child_added listeners are invoked immediately - i.e. not\n      // asynchronously - and the list implementation needs to support that.\n\n      questions.$ref.ref.push({ number: 1 })\n        .then(() => {\n          let calls: string[] = [];\n          questions.$ref.ref.once('child_added', (snap) => calls.push('child_added:' + snap.val().number));\n          skipAndTake(questions).subscribe(\n            (list: any) => {\n              expect(calls).toEqual(['child_added:2', 'pushed']);\n              expect(list.map((i: any) => i.number)).toEqual([1, 2]);\n              done();\n            },\n            done.fail\n          );\n          questions.push({ number: 2 });\n          calls.push('pushed');\n        })\n        .catch(done.fail);\n    });\n\n\n    it('should emit a new value when a child moves', (done: any) => {\n     let question = skipAndTake(questions, 1, 2)\n     subscription = _do.call(question, (data: any) => {\n        expect(data.length).toBe(2);\n        expect(data[0].push2).toBe(true);\n        expect(data[1].push1).toBe(true);\n      })\n      .subscribe(() => {\n        done();\n      }, done.fail);\n\n      let child1 = ref.push({ push1: true }, () => {\n        ref.push({ push2: true }, () => {\n          child1.setPriority('ZZZZ')\n        });\n      });\n    });\n\n\n    it('should emit unwrapped data by default', (done: any) => {\n      ref.remove(() => {\n        ref.push({ unwrapped: true }, () => {\n          subscription = _do.call(skipAndTake(questions, 1), (data: any) => {\n            expect(data.length).toBe(1);\n            expect(data[0].unwrapped).toBe(true);\n          })\n          .subscribe(() => {\n            done();\n          }, done.fail);\n        });\n      });\n    });\n\n\n    it('should emit snapshots if preserveSnapshot option is true', (done: any) => {\n      refSnapshotted.push('hello snapshot!', () => {\n        subscription = _do.call(skipAndTake(questionsSnapshotted, 1),(data: any) => {\n          expect(data[0].val()).toEqual('hello snapshot!');\n        })\n        .subscribe(() => {\n          done();\n        }, done.fail);\n      });\n    });\n\n\n    it('should re-emit identical instances of unchanged children', (done: any) => {\n\n      let prev: any;\n\n      take.call(questions, 2).subscribe(\n        (list: any) => {\n          if (prev) {\n            expect(list[0]).toBe(prev[0]);\n            done();\n          } else {\n            prev = list;\n            questions.push({ name: 'bob' });\n          }\n        },\n        done.fail\n      );\n      questions.push({ name: 'alice' });\n    });\n\n\n    it('should re-emit identical instances of unchanged children as snapshots', (done: any) => {\n\n      let prev: any;\n\n      take.call(questionsSnapshotted, 2).subscribe(\n        (list: any) => {\n          if (prev) {\n            expect(list[0]).toBe(prev[0]);\n            done();\n          } else {\n            prev = list;\n            questionsSnapshotted.push({ name: 'bob' });\n          }\n        },\n        done.fail\n      );\n      questionsSnapshotted.push({ name: 'alice' });\n    });\n\n\n    it('should support null for equalTo queries', (done: any) => {\n\n      questions.$ref.ref.set({\n        val1,\n        val2: Object.assign({}, val2, { extra: true }),\n        val3: Object.assign({}, val3, { extra: true }),\n      })\n      .then(() => {\n\n        let query = FirebaseListFactory(questions.$ref.ref, {\n          query: {\n            orderByChild: \"extra\",\n            equalTo: null\n          }\n        });\n\n        take.call(query, 1).subscribe(\n          (list: any) => {\n            expect(list.length).toEqual(1);\n            expect(list[0].$key).toEqual(\"val1\");\n            done();\n          },\n          done.fail\n        );\n      });\n    });\n\n\n    it('should support null for startAt/endAt queries', (done: any) => {\n\n      questions.$ref.ref.set({\n        val1,\n        val2: Object.assign({}, val2, { extra: true }),\n        val3: Object.assign({}, val3, { extra: true }),\n      })\n      .then(() => {\n\n        let query = FirebaseListFactory(questions.$ref.ref, {\n          query: {\n            orderByChild: \"extra\",\n            startAt: null,\n            endAt: null\n          }\n        });\n\n        take.call(query, 1).subscribe(\n          (list: any) => {\n            expect(list.length).toEqual(1);\n            expect(list[0].$key).toEqual(\"val1\");\n            done();\n          },\n          done.fail\n        );\n      });\n    });\n\n\n    it('should call off on all events when disposed', (done: any) => {\n      const questionRef = app.database().ref().child('questions');\n      subscription = FirebaseListFactory(questionRef).subscribe(_ => {\n        let firebaseSpy = spyOn(questionRef, 'off').and.callThrough();\n        expect(firebaseSpy).not.toHaveBeenCalled();\n        subscription.unsubscribe();\n        expect(firebaseSpy).toHaveBeenCalled();\n        done();\n      });\n    });\n\n\n    describe('onChildAdded', () => {\n\n      it('should add the child after the prevKey', () => {\n        expect(onChildAdded([val1, val2], val3, toKey, 'key1')).toEqual([val1, val3, val2]);\n      });\n\n\n      it('should not mutate the input array', () => {\n        let inputArr = [val1];\n        expect(onChildAdded(inputArr, val2, toKey, 'key1')).not.toEqual(inputArr);\n      });\n    });\n\n\n    describe('onChildChanged', () => {\n\n      it('should move the child after the specified prevKey', () => {\n        expect(onChildChanged([val1, val2], val1, toKey, 'key2')).toEqual([val2, val1]);\n      });\n\n\n      it('should move the child to the beginning if prevKey is null', () => {\n        expect(\n          onChildChanged([val1, val2, val3], val2, toKey, null!)\n        ).toEqual([val2, val1, val3]);\n      });\n\n      it('should not duplicate the first item if it is the one that changed', () => {\n        expect(\n          onChildChanged([val1, val2, val3], val1, toKey, null!)\n        ).not.toEqual([val1, val1, val2, val3]);\n      });\n\n      it('should not mutate the input array', () => {\n        let inputArr = [val1, val2];\n        expect(onChildChanged(inputArr, val1, toKey, 'key2')).not.toEqual(inputArr);\n      });\n\n\n      it('should update the child', () => {\n        expect(\n          onChildUpdated([val1, val2, val3], { key: 'newkey' }, toKey, 'key1').map(v => v.key)\n        ).toEqual(['key1', 'newkey', 'key3']);\n      });\n    });\n\n\n    describe('onChildRemoved', () => {\n\n      it('should remove the child', () => {\n        expect(\n          onChildRemoved([val1, val2, val3], val2, toKey)\n        ).toEqual([val1, val3]);\n      });\n    });\n\n\n    describe('utils.unwrapMapFn', () => {\n      let val = { unwrapped: true };\n      let snapshot = {\n        ref: { key: 'key' },\n        val: () => val\n      };\n\n      it('should return an object value with a $key property', () => {\n        const unwrapped = utils.unwrapMapFn(snapshot as DataSnapshot);\n        expect(unwrapped.$key).toEqual(snapshot.ref.key);\n      });\n\n      it('should return an object value with a $value property if value is scalar', () => {\n        const existsFn = () => { return true; }\n        const unwrappedValue5 = utils.unwrapMapFn(Object.assign(snapshot, { val: () => 5, exists: existsFn }) as DataSnapshot);\n        const unwrappedValueFalse = utils.unwrapMapFn(Object.assign(snapshot, { val: () => false, exists: existsFn }) as DataSnapshot);\n        const unwrappedValueLol = utils.unwrapMapFn(Object.assign(snapshot, { val: () => 'lol', exists: existsFn }) as DataSnapshot);\n\n        expect(unwrappedValue5.$key).toEqual('key');\n        expect(unwrappedValue5.$value).toEqual(5);\n        expect(unwrappedValue5.$exists()).toEqual(true);\n\n        expect(unwrappedValueFalse.$key).toEqual('key');\n        expect(unwrappedValueFalse.$value).toEqual(false);\n        expect(unwrappedValueFalse.$exists()).toEqual(true);\n\n        expect(unwrappedValueLol.$key).toEqual('key');\n        expect(unwrappedValueLol.$value).toEqual('lol');\n        expect(unwrappedValueLol.$exists()).toEqual(true);\n      });\n    });\n\n    it('should emit values in the observable creation zone', (done: any) => {\n      Zone.current.fork({\n        name: 'newZone'\n      })\n      .run(() => {\n        // Creating a new observable so that the current zone is captured.\n        subscription = FirebaseListFactory(app.database().ref(`questions`))\n          .filter(d => d\n            .map((v: any) => v.$value)\n            .indexOf('in-the-zone') > -1)\n          .subscribe(data => {\n            expect(Zone.current.name).toBe('newZone');\n            done();\n          });\n      });\n\n      ref.remove(() => {\n        ref.push('in-the-zone');\n      });\n    });\n\n    describe('Removing and replacing a child key', () => {\n      const firstKey = 'index1';\n      const middleKey = 'index2';\n      const lastKey = 'index3';\n      const initialData = {\n        [firstKey]: true,\n        [middleKey]: true,\n        [lastKey]: true,\n      };\n      let keyToRemove: string;\n\n      afterEach((done: any) => {\n        subscription = questions\n          .skip(2)\n          .take(1)\n          .subscribe((items: any[]) => {\n            expect(items.length).toBe(3);\n            done();\n          }, done.fail);\n        questions.$ref.ref.set(initialData)\n          .then(() => ref.child(keyToRemove).remove())\n          .then(() => ref.child(keyToRemove).set(true));\n      });\n\n      it('should work with the first item in the list', () => {\n        keyToRemove = firstKey;\n      });\n\n      it('should work with the middle item in the list', () => {\n        keyToRemove = middleKey;\n      });\n\n      it('should work with the last item in the list', () => {\n        keyToRemove = lastKey;\n      });\n    });\n\n    describe('startAt(value, key)', () => {\n\n      it('should support the optional key parameter to startAt', (done) => {\n\n        questions.$ref.ref.set({\n          val1: Object.assign({}, val1, { data: 0 }),\n          val2: Object.assign({}, val2, { data: 0 }),\n          val3: Object.assign({}, val3, { data: 0 })\n        })\n        .then(() => {\n\n          let query1 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              startAt: { value: 0 }\n            }\n          });\n          let promise1 = toPromise.call(take.call(query1, 1));\n\n          let query2 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              startAt: { value: 0, key: 'val2' }\n            }\n          });\n          let promise2 = toPromise.call(take.call(query2, 1));\n\n          Promise.all([promise1, promise2]).then(([list1, list2]) => {\n            expect(list1.map((i: any) => i.$key)).toEqual(['val1', 'val2', 'val3']);\n            expect(list2.map((i: any) => i.$key)).toEqual(['val2', 'val3']);\n            done();\n          });\n        })\n        .catch(done.fail);\n      });\n\n    });\n\n    describe('equalTo(value, key)', () => {\n\n      it('should support the optional key parameter to equalTo', (done) => {\n\n        questions.$ref.ref.set({\n          val1: Object.assign({}, val1, { data: 0 }),\n          val2: Object.assign({}, val2, { data: 0 }),\n          val3: Object.assign({}, val3, { data: 0 })\n        })\n        .then(() => {\n\n          let query1 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              equalTo: { value: 0 }\n            }\n          });\n          let promise1 = toPromise.call(take.call(query1, 1));\n\n          let query2 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              equalTo: { value: 0, key: 'val2' }\n            }\n          });\n          let promise2 = toPromise.call(take.call(query2, 1));\n\n          Promise.all([promise1, promise2]).then(([list1, list2]) => {\n            expect(list1.map((i: any) => i.$key)).toEqual(['val1', 'val2', 'val3']);\n            expect(list2.map((i: any) => i.$key)).toEqual(['val2']);\n            done();\n          });\n        })\n        .catch(done.fail);\n      });\n\n    });\n\n    describe('endAt(value, key)', () => {\n\n      it('should support the optional key parameter to endAt', (done) => {\n\n        questions.$ref.ref.set({\n          val1: Object.assign({}, val1, { data: 0 }),\n          val2: Object.assign({}, val2, { data: 0 }),\n          val3: Object.assign({}, val3, { data: 0 })\n        })\n        .then(() => {\n\n          let query1 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              endAt: { value: 0 }\n            }\n          });\n          let promise1 = toPromise.call(take.call(query1, 1));\n\n          let query2 = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'data',\n              endAt: { value: 0, key: 'val2' }\n            }\n          });\n          let promise2 = toPromise.call(take.call(query2, 1));\n\n          Promise.all([promise1, promise2]).then(([list1, list2]) => {\n            expect(list1.map((i: any) => i.$key)).toEqual(['val1', 'val2', 'val3']);\n            expect(list2.map((i: any) => i.$key)).toEqual(['val1', 'val2']);\n            done();\n          });\n        })\n        .catch(done.fail);\n      });\n\n    });\n\n    describe('observable queries (issue #830)', () => {\n\n      it('should not emit the results of previous queries', (done) => {\n\n        questions.$ref.ref.set({\n          key1: { even: false, value: 1 },\n          key2: { even: true, value: 2 }\n        })\n        .then(() => {\n\n          let subject = new Subject<boolean>();\n          let query = FirebaseListFactory(app.database().ref(`questions`), {\n            query: {\n              orderByChild: 'even',\n              equalTo: subject\n            }\n          });\n\n          query = map.call(query, (list: any, index: any) => {\n            switch (index) {\n            case 0:\n              subject.next(true);\n              break;\n            case 1:\n              questions.$ref.ref.update({\n                key3: { even: false, value: 3 },\n                key4: { even: true, value: 4 }\n              });\n              break;\n            default:\n              break;\n            }\n            return list;\n          });\n          query = take.call(query, 3);\n          query = toArray.call(query);\n\n          toPromise.call(query).then((emits: any) => {\n            expect(emits.map((e: any) => e.map((i: any) => i.$key))).toEqual([\n              ['key1'],\n              ['key2'],\n              ['key2', 'key4']\n            ]);\n            done();\n          });\n\n          subject.next(false);\n        })\n        .catch(done.fail);\n      });\n\n    });\n\n  });\n});\n\nfunction skipAndTake<T>(obs: Observable<T>, takeCount: number = 1, skipCount: number = 0) {\n  return take.call(skip.call(obs, skipCount), takeCount);\n}\n"]}