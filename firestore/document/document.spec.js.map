{"version":3,"file":"document.spec.js","sourceRoot":"","sources":["../../../../src/firestore/document/document.spec.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAqB,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjF,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,qBAAqB,CAAC;AAC7D,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAMhE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAE/C,OAAO,EAAS,UAAU,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAEnE,QAAQ,CAAC,0BAA0B,EAAE;IACnC,IAAI,GAAU,CAAC;IACf,IAAI,GAAqB,CAAC;IAC1B,IAAI,GAAiB,CAAC;IAEtB,UAAU,CAAC;QACT,OAAO,CAAC,sBAAsB,CAAC;YAC7B,OAAO,EAAE;gBACP,iBAAiB,CAAC,aAAa,CAAC,aAAa,CAAC;gBAC9C,sBAAsB,CAAC,iBAAiB,EAAE;aAC3C;SACF,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,WAAW,EAAE,gBAAgB,CAAC,EAAE,CAAC,IAAW,EAAE,IAAsB;YAC1E,GAAG,GAAG,IAAI,CAAC;YACX,GAAG,GAAG,IAAI,CAAC;QACb,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,CAAO,IAAI;QACnB,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;QACnB,IAAI,EAAE,CAAC;IACT,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,CAAO,IAAS;QAC9C,MAAM,oBAAoB,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvD,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,oBAAoB,OAAO,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAI,wBAAwB,CAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;QAC5D,MAAM,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACjC,MAAM,GAAG,GAAG,KAAK;aACd,eAAe,EAAE;aACjB,SAAS,CAAC,CAAM,CAAC;YAChB,GAAG,CAAC,WAAW,EAAE,CAAC;YAClB,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBAClD,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,CAAA,CAAC,CAAC;IACP,CAAC,CAAA,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,CAAO,IAAS;QAClD,MAAM,oBAAoB,GAAG,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;QACpE,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,oBAAoB,OAAO,CAAC,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAI,wBAAwB,CAAQ,GAAG,EAAE,GAAG,CAAC,CAAC;QAC5D,MAAM,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACjC,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAO,IAAW;YACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC;YACnE,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["import { FirebaseApp, FirebaseAppConfig, AngularFireModule } from 'angularfire2';\nimport { AngularFirestore } from '../firestore';\nimport { AngularFirestoreModule } from '../firestore.module';\nimport { AngularFirestoreDocument } from '../document/document';\n\nimport { FirebaseApp as FBApp } from '@firebase/app-types';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { TestBed, inject } from '@angular/core/testing';\nimport { COMMON_CONFIG } from '../test-config';\n\nimport { Stock, randomName, FAKE_STOCK_DATA } from '../utils.spec';\n\ndescribe('AngularFirestoreDocument', () => {\n  let app: FBApp;\n  let afs: AngularFirestore;\n  let sub: Subscription;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [\n        AngularFireModule.initializeApp(COMMON_CONFIG),\n        AngularFirestoreModule.enablePersistence()\n      ]\n    });\n    inject([FirebaseApp, AngularFirestore], (_app: FBApp, _afs: AngularFirestore) => {\n      app = _app;\n      afs = _afs;\n    })();\n  });\n\n  afterEach(async (done) => {\n    await app.delete();\n    done();\n  });\n\n  it('should get action updates', async (done: any) => {\n    const randomCollectionName = randomName(afs.firestore);\n    const ref = afs.firestore.doc(`${randomCollectionName}/FAKE`);\n    const stock = new AngularFirestoreDocument<Stock>(ref, afs);\n    await stock.set(FAKE_STOCK_DATA);\n    const sub = stock\n      .snapshotChanges()\n      .subscribe(async a => {\n        sub.unsubscribe();\n        if (a.payload.exists) {\n          expect(a.payload.data()).toEqual(FAKE_STOCK_DATA);\n          stock.delete().then(done).catch(done.fail);\n        }\n      });\n  });\n\n  it('should get unwrapped snapshot', async (done: any) => {\n    const randomCollectionName = afs.firestore.collection('a').doc().id;\n    const ref = afs.firestore.doc(`${randomCollectionName}/FAKE`);\n    const stock = new AngularFirestoreDocument<Stock>(ref, afs);\n    await stock.set(FAKE_STOCK_DATA);\n    const obs$ = stock.valueChanges();\n    obs$.take(1).subscribe(async (data: Stock) => {\n      expect(JSON.stringify(data)).toBe(JSON.stringify(FAKE_STOCK_DATA));\n      stock.delete().then(done).catch(done.fail);\n    });\n  });\n\n});\n"]}